_prepend_path ()    { export PATH="$1:$PATH"; }  # extend PATH with $1
prepend_path ()     { [ -d $1 ] && _prepend_path $1 || echo "$1 does not exist"; }
mby_prepend_path () { [ -d $1 ] && _prepend_path $1; }
mby_source_file ()  { [ -f $1 ] && source $1; }  # source $1 if it's a file
mby_run_file ()     { [ -f $1 ] && $1 || echo "$1 does not exist"; }
silent ()           { $1 &> /dev/null; return $?; } # run commands silently

mby_source_file "/etc/skel/.bashrc"             # ubuntu bash defaults
mby_source_file "/usr/share/git/git-prompt.sh"  # git PS1
mby_source_file "$HOME/.bash_hostspecific"      # hostspecific aliases and env.vars
mby_source_file "$HOME/.fzf.bash"               # fzf bash integration

mby_prepend_path "$HOME/.local/bin"
mby_prepend_path "$HOME/.cargo/bin"  # cargo (rust)
mby_prepend_path "$HOME/go/bin"      # go packages

# Environment variables
export EDITOR=hx
export BROWSER=chromium
export npm_config_prefix="$HOME/.local"

# Handy aliases
alias naut='nautilus . > /dev/null &'
alias rm='rm --interactive=once --verbose'
alias p="python3"
alias pm="python3 -m"
alias tmux="tmux -2"

# git aliases
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st 'status --short --branch'
git config --global alias.br branch
git config --global alias.cp cherry-pick
git config --global alias.rb rebase
git config --global alias.rbc 'rebase --continue'
git config --global alias.d diff
git config --global alias.ds 'diff --staged'
git config --global alias.unstage 'reset HEAD --'
git config --global alias.unmodify 'checkout --'
git config --global alias.lg 'log --oneline -n10'
git config --global alias.lgg 'log --graph --oneline --branches -n 20 HEAD'
git config --global alias.detach 'checkout --detach'
git config --global alias.cleen 'clean -xdf -e venv*/'
git config --global alias.ups 'commit -a --amend --no-edit'

# launch git-related apps
git config --global alias.ui         '!lazygit || echo "could not launch lazygit :("'

# gerrit pushing
git config --global alias.magic '!git push origin HEAD:refs/for/master || (read -p "Try "main" branch instead of "master"? (Y/n)" yn && [ "$yn" != "n" ] && git push origin HEAD:refs/for/main)'
git config --global alias.blackmagic 'push --no-verify origin HEAD:refs/for/master'

# sets prompt (t.y.: https://stackoverflow.com/a/30963255)
export GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWDIRTYSTATE=1
get_ps1()
{
  local txtreset='$(tput sgr0)'
  local txtbold='$(tput bold)'
  local txtstandout='$(tput smso)'
  local txtdim='$(tput dim)'
  local txtuline_start='$(tput smul)'
  local txtuline_end='$(tput rmul)'

  local txtred='$(tput setaf 1)'
  local txtgreen='$(tput setaf 2)'
  local txtyellow='$(tput setaf 3)'
  local txtblue='$(tput setaf 4)'
  local txtpurple='$(tput setaf 5)'
  local txtcyan='$(tput setaf 6)'

  # current path
  local path="\[$txtpurple\]\w\[$txtreset\]"

  # git branch
  local git_head='$(__git_ps1 "%s")'
  local commit_title='$(git log -n1 --format="format:%s" 2>/dev/null | cut -c1-50)'

  # commit_title="$(git log -n1 --format='format:%s' 2>/dev/null)"
  # if [ -n "$commit_title" ]
  # then
    # PS1+=' \[$txtdim\]$(echo $commit_title | cut -c1-30)...\[$txtreset\] ]'
  # fi

  # good old prompt, $ for user, # for root
  echo "$path [ $git_head | \[$txtdim\]$commit_title\[$txtreset\] ]\n\\$ "
}
export PS1=$(get_ps1)


## Utility functions

# Returns the unmerged file names
conflicts () {
  git diff --name-only --diff-filter=U
}

# Returns & prints error if any command in $@ does not exists
require () {
  for cmd in $@; do
    if ! silent "command -v $cmd"; then
	    echo "$cmd does not exist"
	    return 1
  	fi
  done
}


# grep + sed based symbol renamer
#
# $1 is the old name
# $2 is the new name
# $3 is the working directory (or "." if ommited)
rename-symbol () {
  if [ $# -lt 2 ]; then
    echo "not enough arguments"
    return 1
  fi

  root=${3:-.}

  grep -lr -1 $1 $root | xargs -i@ sed -i "s/$1/$2/g" @

  echo "Changed all occurences under \"$root\" from"
  echo "\"$1\""
  echo "to"
  echo "\"$2\""
}


# handy clipboard. Example:
#    cat my_file.txt | ahclip
ahclip () {
	require "xclip" || return 1

	cat - | xclip -selection clipboard
}

ahclipcmd () {
  require "xclip" || return 1

  history | cut -d' ' -f4- | tail -n2 | head -n1 | ahclip
}

v () {
  source $(ls **/bin/activate | fzf --select-1 --exit-0)
}
