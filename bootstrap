#!/usr/bin/python3
import filecmp
import os
import subprocess

from pathlib import Path
from termcolor import colored


def print_help_and_exit():
    print('This is an interactive bootstrapping script that symlinks to some config files.')
    exit(0)

# pretty colors :)
def highlight(string):  return colored(string, attrs=['bold', 'underline'])
def warning(string):    return colored(string, 'yellow', attrs=['bold'])
def good(string):       return colored(string, 'green', attrs=['bold'])
def note():             return colored('Note:', 'cyan', attrs=['bold'])
def print_subsection(*args):
    string = ' '.join(args)
    string = ' ' + string + ' '
    print(('-'*10) + (string.ljust(70, '-')))

def section_print(title):
    def decorator(function):
        def wrapper(*args, **kwargs):
            print('='*80)
            print(' '*20, title)
            print('='*80)
            function(*args, **kwargs)
            print()
        return wrapper
    return decorator


def create_symlink(path_target, path_linkname):
    path_target = os.path.abspath(os.path.expanduser(path_target))
    path_linkname = os.path.abspath(os.path.expanduser(path_linkname))
    current_file = os.path.basename(path_target)
    print('Processing', highlight(current_file), '...')
    
    if not os.path.exists(path_target):
        print(' ', warning('Target for link does not exist:'), f'\n\t{path_target}')
        return

    if os.path.exists(path_linkname):
        # check if target & linkname are already linked:
        if os.path.islink(path_linkname) and os.readlink(path_linkname) == path_target:
            print(' ', highlight(current_file), good('is already completely linked'))
            return

        # if the files are equal, it should be safe to overwrite path_linkname
        # by linking.
        if (filecmp.cmp(path_target, path_linkname, shallow=False)):
            print(' ', warning('Overwriting'), current_file, 'as contents where exactly the same.')
            os.remove(path_linkname)
            os.symlink(path_target, path_linkname)
            return
        
        print(' ', warning('Nothing will be done for'), highlight(current_file))
        print(' ', note(), 'you need to resolve differances in already present files.')
    else:
        print(' ', 'No file at ', highlight(path_linkname), 'linking inbound!')
        os.makedirs(os.path.dirname(path_linkname), exist_ok=True)
        os.symlink(path_target, path_linkname)


@section_print(title='Symlinking dotfiles')
def create_symlinks(symlink_dict):
    for t, ln in symlink_dict.items():
        create_symlink(t, ln)


@section_print(title='Updating ' + highlight('bash_hostspecific'))
def update_dotfiles_home_env(this_d):
    bash_hs = Path('~/.bash_hostspecific').expanduser()
    if bash_hs.exists():
        with open(bash_hs, 'r+') as file_obj:
            lines = file_obj.readlines()
            file_obj.seek(0)
            found_line = False

            for line in lines:
                if not line.startswith('export DOTFILES_HOME'):
                    file_obj.write(line)
                else:
                    found_line = True
                    file_obj.write(f'export DOTFILES_HOME={this_d}\n')
                    print('Updated already present definition ...')

            if not found_line:
                file_obj.write(f'export DOTFILES_HOME={this_d}\n')
    else:
        print(highlight('~/..bash_hostspecific'), 'does not exists...')
        print('Creating it and adding DOTFILES_HOME definition')
        with open(bash_hs, 'a+') as file_obj:
            file_obj.write(f'export DOTFILES_HOME={this_d}\n')

def clone_install_github(github_url, clone_path, apt_prereqs, install_cmds):
    clone_path = Path(clone_path)
    if clone_path.exists():
        print(highlight(clone_path), warning('already exists.'), 'Will not try to clone.')
        return

    if not clone_path.parent.exists():
        print('Creating parent folder at ' + highlight(clone_path.parent))
        subprocess.run((f'mkdir -p {clone_path.parent}').split(' '))

    # Clone to a folder in the parent folder.
    print('Cloning ' + highlight(github_url) + ' to ' + highlight(clone_path))
    subprocess.run((f'git clone {github_url} {clone_path}').split(' '))

    print('Installing prerequisites with apt')
    subprocess.run((f'sudo apt install {prereqs}').split(' '))

    # run install commands
    print('Running install commands:')
    for cmd in install_cmds:
        print('\t' + highlight(cmd))
    for cmd in install_cmds:
        subprocess.run(cmd.split(' '), cwd=clone_path)

@section_print(title='Installing deps')
def install_deps(deps_dict):
    for github_dep in deps_dict['github'].values():
        print_subsection('Installing', highlight(github_dep['github_url']))
        clone_install_github(**github_dep)
        print()

    print_subsection(highlight('Installing with pip3:'), *deps_dict['pip3'])
    subprocess.run(['pip3', 'install', *deps_dict['pip3']])
    print()

    print_subsection(highlight('Installing with apt:'), *deps_dict['apt'])
    subprocess.run(['sudo', 'apt', 'install', '-y',  *deps_dict['apt']])
    print()

    print_subsection(highlight('Installing vim-plugged'))
    subprocess.run(("sh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim"
                   " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'").split(' '))
    print()


def main():
    # Assert execution from 'dotfiles'-directory.
    this_d  = Path(__file__).parent.absolute()
    cwd     = Path.cwd().absolute()
    if (this_d != cwd):
        print(f'You must execute this script from "{this_d}".')
        exit(1)

    LINKS = {
        #relative target        linkname
         './vimrc/my_vimrc':    '~/.vimrc',
         './bashrc/my_bashrc':  '~/.bashrc',
         './tmux/tmux.conf':    '~/.tmux/tmux.conf',
         './nvim/init.vim':     '~/.config/nvim/init.vim',
         './nvim/coc-settings.json':            '~/.config/nvim/coc-settings.json',
         './nvim/coc_example_vim_cfg.vim':      '~/.config/nvim/coc_example_vim_cfg.vim',
    }
    create_symlinks(LINKS)

    GITHUB_INSTALL_PATH = Path('~/repos').expanduser()
    DEPS = {
        'github' : {
            'neovim' : {
                'github_url' : 'https://github.com/neovim/neovim.git',
                'clone_path' : GITHUB_INSTALL_PATH / 'neovim',
                'apt_prereqs' : 'ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip',
                'install_cmds' : ['make CMAKE_BUILD_TYPE=RelWithDebInfo', 'sudo make install'],
            }
        },
        'apt' : ['curl', 'tmux', 'ranger', 'ripgrep'],
        'pip3' : ['jedi-language-server'],
    }
    install_deps(DEPS)

    # fix DOTFILES_HOME
    update_dotfiles_home_env(this_d)


if __name__ == '__main__':
    main()
