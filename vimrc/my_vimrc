set nocompatible
set encoding=UTF-8
set modelines=0

" Automatically installs 'vim-plug' if it is not installed. (linux only)
if has('unix')
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif

if has('unix')
    call plug#begin('~/.vim/plugged')
else
    " Windows land
    call plug#begin('~/vimfiles/plugged')
endif
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'gilgigilgil/anderson.vim'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'nvie/vim-flake8'
" Jedi-vim (Autocomplete for python)
Plug 'davidhalter/jedi-vim'

call plug#end()

filetype plugin on
""""""""""""
" Mappings "
""""""""""""

let mapleader = ","
nnoremap <Leader><Space> :noh<CR>
nnoremap ; :
nnoremap <F8> :set number! relativenumber!<CR>

" Movement
nnoremap j gj
nnoremap k gk
nnoremap <tab> %

" Movement between splits.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Movement between buffers
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>

" Resize vertical splits
nnoremap <Leader>m :vertical resize -5<CR>
nnoremap <Leader>p :vertical resize +5<CR>

" Command mode with swedish keyboard layout
nnoremap ö :
nnoremap Ö :

" Open terminal with Ctrl+D (And then exit that with Ctrl+D aswell :D)
nnoremap <C-d> :sh<CR>

" Scroll through popup with tab
inoremap <expr> <Tab> pumvisible() ? "\<Down>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<Up>" : "\<S-Tab>"

" vimrc
map <Leader>sv :source $MYVIMRC<CR>
map <Leader>ev <C-w><C-v><C-w><C-l>:e $MYVIMRC<CR>


""""""""""""
" Settings "
""""""""""""

" Formatting
set wrap
set textwidth=80
set formatoptions=qrn1
set colorcolumn=+1

" Tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent
set cindent
set expandtab

" Folds
set foldmethod=indent
set foldlevel=1
set foldclose=all
set foldnestmax=2

" Search
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

" Misc
set hidden
set scrolloff=10
set visualbell
set ttyfast
set ruler
set laststatus=2
set undofile
set number relativenumber
set gdefault
set autoread

" Some workaround for weird chars in current line in vim82.
let &t_TI = ""
let &t_TE = ""

" get rid those of nasty files
if has('unix')
    set undodir=/tmp//
    set directory=/tmp//
    set backupdir=/tmp//
else
    " Windows land
    silent execute '!mkdir "'.$VIMRUNTIME.'/temp"'
    silent execute '!del "'.$VIMRUNTIME.'/temp/*~"'

    set undodir=$VIMRUNTIME/tmp//
    set backupdir=$VIMRUNTIME/tmp//
    set directory=$VIMRUNTIME/tmp//
endif


"""""""""""""""""""
" File specifics ""
"""""""""""""""""""
autocmd FileType python nnoremap <leader>; <Esc>:w<CR>:!clear;python3 "%"<CR>
autocmd FileType python nnoremap <leader>t <Esc>:w<CR>:!clear;mypy %<CR>

autocmd FileType markdown nnoremap <leader>o <Esc>:w<CR>:! $BROWSER %<CR>

""""""""""""""""
" Autocommands "
""""""""""""""""
autocmd FocusLost * :wa
autocmd BufEnter :syntax sync fromstart

" Fixes cursor on exit and leave.
autocmd VimEnter * silent exec "! echo -ne '\e[1 q'"
autocmd VimLeave * silent exec "! echo -ne '\e[5 q'"

augroup vimrc
  " Remove all vimrc autocommands
  autocmd!
  " Add them again
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END

" Define highlight for trailing whitespace
highlight ExtraWhitespace ctermbg=red ctermfg=black
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red ctermfg=black
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
set ambiwidth=double
set listchars=trail:.
set list

""""""""""""""""
" Colorscheme  "
""""""""""""""""
colorscheme anderson

"""""""""""""""""
" Plugin Config "
"""""""""""""""""

" Nerdtree config
map <C-t> :NERDTreeToggle<CR>" Toggle NerdTree with Ctrl+t

let NERDTreeChDirMode  = 2  " Changes pwd with root-node change
let NERDTRreeMinimalUI = 1
let NERDTRreeDirArrows = 1
let NERDTreeShowBookmarks = 1
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "M",
    \ "Staged"    : "S",
    \ "Untracked" : "?",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "Unmerged",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" YCM (not used)
let g:ycm_python_binary_path = 'python3'
let g:ycm_autoclose_preview_window_after_completion=1

" Jedi vim
set nowrap " signature tips are cancer without this.

" Asyncrun
let g:asyncrun_open = 6
let $PYTHONUNBUFFERED=1

" GitGutter
set updatetime=500
function! GitStatus()
    let [a,m,r] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d', a, m, r)
endfunction
let g:gitgutter_sign_added = 'a'
let g:gitgutter_sign_modified = 'm'
let g:gitgutter_sign_removed = 'r'
"let g:gitgutter_map_keys = 0

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '

