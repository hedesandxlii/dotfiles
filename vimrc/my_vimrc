set nocompatible
set encoding=UTF-8
set modelines=0

" Automatically installs 'vim-plug' if it is not installed. (linux only)
if has('unix')
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif

if has('unix')
    call plug#begin('~/.vim/plugged')
else
    " Windows land
    call plug#begin('~/vimfiles/plugged')
endif
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'gilgigilgil/anderson.vim'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'nvie/vim-flake8', { 'for': 'python' }
" Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'ycm-core/YouCompleteMe', { 'for': ['python', 'c'] }
Plug 'TaDaa/vimade'
call plug#end()

""""""""""""""""
" Colorscheme  "
""""""""""""""""
colorscheme anderson

filetype plugin on
""""""""""""
" Mappings "
""""""""""""

let mapleader = ","
nnoremap <Leader><Space> :noh<CR>
nnoremap <F8> :set number! relativenumber!<CR>
nnoremap <Leader><Tab> :setlocal noet<CR>
nnoremap Y y$

" Movement
nnoremap j gj
nnoremap k gk

" Movement between splits/buffers.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <Leader>bh :bp<CR>
nnoremap <Leader>bl :bn<CR>

" Resize splits
" nnoremap <C-p> :resize +5<CR>
" nnoremap <C-m> :resize -5<CR>

" Command mode with swedish keyboard layout
nnoremap ö :
nnoremap Ö :

" Open terminal with Ctrl+D (And then exit that with Ctrl+D aswell :D)
nnoremap <C-d> :sh<CR>

" Scroll through popup with tab
inoremap <expr> <Tab> pumvisible() ? "\<Down>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<Up>" : "\<S-Tab>"

" vimrc
map <Leader>sv :source $MYVIMRC<CR>
map <Leader>ev :e $MYVIMRC<CR>


""""""""""""
" Settings "
""""""""""""

" Formatting
set wrap
set textwidth=100
set formatoptions=qrn1
set colorcolumn=+1
set nowrap

" Tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent
set cindent
set expandtab

" Folds
set foldmethod=syntax
set foldlevel=1
set foldclose=all
set foldnestmax=1

" Search
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

" Misc
set hidden
set splitbelow
set splitright
set scrolloff=5
set visualbell
set ttyfast
set ruler
set laststatus=2
set undofile
set number relativenumber
set gdefault
set autoread

" Some workaround for weird chars in current line in vim82.
let &t_TI = ""
let &t_TE = ""

" get rid those of nasty files
if has('unix')
    set undodir=/tmp//
    set directory=/tmp//
    set backupdir=/tmp//
else
    " Windows land
    silent execute '!mkdir "'.$VIMRUNTIME.'/temp"'
    silent execute '!del "'.$VIMRUNTIME.'/temp/*~"'

    set undodir=$VIMRUNTIME/tmp//
    set backupdir=$VIMRUNTIME/tmp//
    set directory=$VIMRUNTIME/tmp//
endif


"""""""""""""""""""
" File specifics ""
"""""""""""""""""""
autocmd FileType python nnoremap <leader>; <Esc>:w<CR>:!clear;python3 "%"<CR>
autocmd FileType python nnoremap <leader>t <Esc>:w<CR>:!clear;mypy %<CR>
autocmd FileType python set foldmethod=indent

autocmd FileType markdown nnoremap <leader>; <Esc>:w<CR>:! $BROWSER %<CR>

autocmd FileType c nnoremap <leader>; <Esc>:w<CR>:!clear && make<CR>
autocmd FileType c inoremap <leader>print printf("\n");<Esc>F\i

autocmd FileType sh nnoremap <leader>; <Esc>:w<CR>:!clear && ./"%"<CR>

" Post write hooks "

" autocmd BufWritePost ~/repos/dotfiles/** !cd ~/repos/dotfiles; git ci -a --amend --no-edit;

""""""""""""""""
" Autocommands "
""""""""""""""""
autocmd FocusLost * :wa
autocmd BufEnter :syntax sync fromstart

" Fixes cursor on exit and leave.
autocmd VimEnter * silent exec "! echo -ne '\e[1 q'"
autocmd VimLeave * silent exec "! echo -ne '\e[5 q'"

augroup vimrc
  " Remove all vimrc autocommands
  autocmd!
  " Add them again
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END

" Define highlight for trailing whitespace
highlight ExtraWhitespace ctermbg=red ctermfg=black
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red ctermfg=black
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
set ambiwidth=double
set showbreak=↪\

" Listchars setting
highligh SpecialKey ctermfg=DarkGrey
set listchars=tab:↦\ ,nbsp:␣,trail:·,extends:⟩,precedes:⟨
set list


"""""""""""""""""
" Plugin Config "
"""""""""""""""""

" vim surround
nmap s <Plug>Ysurround
nmap S <Plug>YSurround
xmap s <Plug>VSurround
xmap S <Plug>VgSurround

" Nerdtree config
map <C-t> :NERDTreeToggle<CR>" Toggle NerdTree with Ctrl+t
" let NERDTreeChDirMode  = 2  " Changes pwd with root-node change
let NERDTRreeMinimalUI = 1
let NERDTRreeDirArrows = 1
let NERDTreeShowBookmarks = 1
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "M",
    \ "Staged"    : "S",
    \ "Untracked" : "?",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "U",
    \ "Deleted"   : "D",
    \ "Dirty"     : "",
    \ "Clean"     : "",
    \ 'Ignored'   : '',
    \ "Unknown"   : "?"
    \ }

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#buffer_nr_show = 1

" YCM
function EditYcmExtra()
    edit '~/.local/src/YCM/.ycm_extra_conf.py'
endfunction
let g:ycm_global_ycm_extra_conf = '~/.local/src/YCM/.ycm_extra_conf.py'
nnoremap <leader>d   :YcmCompleter GoTo<CR>

" FZF
nnoremap <leader>f      :Files<CR>
nnoremap <leader>t      :Tags<CR>
nnoremap <leader>bt     :BTags<CR>
" nnoremap <leader>b      :Buffers<CR>
